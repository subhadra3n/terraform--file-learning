Absolutely. Here's a production-level Terraform setup for deploying a web application on AWS, covering key infrastructure components including:

VPC, Subnets (public/private)

Internet Gateway, NAT Gateway

Security Groups

EC2 (application instance)

RDS (optional - production DB)

S3 (optional - static assets)

Auto Scaling, Load Balancer (optional)

Terraform best practices (modular, outputs, variables)

✅ Project Structure (Modular Approach)
cpp
Copy
Edit
terraform-app/
├── main.tf
├── variables.tf
├── outputs.tf
├── vpc.tf
├── ec2.tf
├── security_groups.tf
├── provider.tf
├── user_data.sh
└── backend.tf (optional for remote state)

# provider.tf
provider "aws" {
  region = "ap-south-1"
}

# variables.tf
variable "vpc_cidr" {
  default = "10.0.0.0/16"
}

variable "public_subnet_cidr" {
  default = "10.0.1.0/24"
}

variable "instance_type" {
  default = "t2.micro"
}

variable "key_name" {
  description = "EC2 Key Pair name"
  default     = "jenkins"
}

# vpc.tf
resource "aws_vpc" "main" {
  cidr_block           = var.vpc_cidr
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "prod-vpc"
  }
}

resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "prod-igw"
  }
}

resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet_cidr
  map_public_ip_on_launch = true
  availability_zone       = "ap-south-1a"

  tags = {
    Name = "public-subnet"
  }
}

resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "public-rt"
  }
}

resource "aws_route_table_association" "public_assoc" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.public_rt.id
}

# security_groups.tf
resource "aws_security_group" "web_sg" {
  name        = "web-sg"
  description = "Allow HTTP and SSH"
  vpc_id      = aws_vpc.main.id

  ingress {
    description = "Allow HTTP"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    description = "Allow SSH"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "web-sg"
  }
}

# ec2.tf
resource "aws_instance" "web" {
  ami                    = "ami-0f918f7e67a3323f0" # Amazon Linux 2 (Mumbai)
  instance_type          = var.instance_type
  subnet_id              = aws_subnet.public.id
  key_name               = var.key_name
  vpc_security_group_ids = [aws_security_group.web_sg.id]

  user_data = file("user_data.sh")

  tags = {
    Name = "web-server"
  }
}

# outputs.tf
output "instance_public_ip" {
  value = aws_instance.web.public_ip
}

output "web_url" {
  value = "http://${aws_instance.web.public_ip}"
}

# user_data.sh (create this file in same folder with below content)
# #!/bin/bash
# yum update -y
# yum install -y nginx
# systemctl start nginx
# systemctl enable nginx
# echo "Welcome to Production App via Terraform!" > /usr/share/nginx/html/index.html
