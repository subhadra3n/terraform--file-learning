
✅ Application Load Balancer (ALB)
Yes, ALBs require security groups because they operate at Layer 7 (HTTP/HTTPS) and use Elastic Network Interfaces (ENIs) in your VPC.

You must attach security groups to control inbound and outbound access.

✅ Network Load Balancer (NLB)
No, NLBs do not use security groups.

NLBs operate at Layer 4 (TCP/UDP) and do not support security groups directly.

Instead, you control access through security groups attached to your targets (like EC2 instances).
________________________________________________________________________________________________________________________________________________________-
N/w load balancer--------------------

resource "aws_lb" "nlb" {
  name               = "example-nlb"
  load_balancer_type = "network"
  subnets            = [aws_subnet.subnet_a.id, aws_subnet.subnet_b.id]
  enable_deletion_protection = false
}

resource "aws_lb_target_group" "nlb_tg" {
  name     = "nlb-target-group"
  port     = 80
  protocol = "TCP"
  vpc_id   = aws_vpc.main.id
}

resource "aws_lb_listener" "nlb_listener" {
  load_balancer_arn = aws_lb.nlb.arn
  port              = 80
  protocol          = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.nlb_tg.arn
  }
}



________________________________________________________________________________________________________________________________________---------------------------------

Application load balancer:--------------

resource "aws_lb" "front_end"

 name =
 internal =
load_balancer_type = "application"  or "n/w"
security groups = 
subnets = 
enable_deletion_protection = false                 # When deletion protection is enabled, it prevents the load balancer from being accidentally deleted. enable_deletion_protection = true
                                                   #Even if someone tries to delete it via the AWS Console, CLI, or SDK, the deletion will fail unless deletion protection is first disabled.
                                                   # Useful for development or testing environments where frequent resource creation/deletion is common.

                                                   #Not recommended for production environments where uptime is critical.

resource "aws_lb_listener" "front_end"{
load_balance_arn = aws_lb.fron_end.arn-------------arn--it     will automatically create in LB
port = "80"
protocol = "HTTP"

default_action {
type ="forward"
target_group_arn = aws_lb_targer_group.front_end.arn
}
}

resource "aws_lb_target_group" "front_end"{
name = "front-end-lb-tg"
port =3000
protocol = "HTTP"
vpc_id = aws_vpc.main.id
}
_________________________________________________________________________________________________________________________________________--
in the listner block-------
type--Forward, redirect, fixed_response
redirect ---code--
1. type = "redirect"
This action tells the load balancer to redirect the request to another URL or protocol (common use: HTTP → HTTPS redirect).

Example: Redirect HTTP to HTTPS

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.example.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "redirect"

    redirect {
      port        = "443"
      protocol    = "HTTPS"
      status_code = "HTTP_301"
    }
  }
}
_________________________________________________________----
2.type = "fixed_response
This tells the ALB to immediately return a custom HTTP response without forwarding the request to a target group.

resource "aws_lb_listener" "http" {
  load_balancer_arn = aws_lb.example.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type = "fixed-response"

    fixed_response {
      content_type = "text/plain"
      message_body = "Service temporarily unavailable. Please try again later."
      status_code  = "503"
    }
  }
}
