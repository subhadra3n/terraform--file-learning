Sure! Here's a complete production-style Terraform code to provision the following AWS resources using modules for better organization:

Resources Included:
VPC

Subnets (Public & Private)

Internet Gateway

Route Tables

Security Groups

EC2 instance

Application Load Balancer (ALB)

Auto Scaling Group (ASG)

Launch Template

S3 Bucket

RDS (optional block commented)

_________________________________________________________________________________________________________________________________________________________________________________________________________________________________
project structure:

terraform-project/
├── main.tf
├── variables.tf
├── outputs.tf
├── provider.tf
├── modules/
│   ├── vpc/
│   │   └── main.tf
│   ├── ec2/
│   │   └── main.tf
│   ├── alb/
│   │   └── main.tf
│   └── s3/
│       └── main.tf
____________________________________________________________________________________________________________________________________________________________________________________________________________________________
provider.tf:-----cloud provider, or multi clioud provider, region
provider "aws" {
  region = "ap-south-1"
}
__________________________________________________________________________________________________________________
main.tf:
module "vpc" {
  source = "./modules/vpc"
}

module "ec2" {
  source         = "./modules/ec2"
  vpc_id         = module.vpc.vpc_id
  public_subnet  = module.vpc.public_subnet_id
  sg_id          = module.vpc.sg_id
}

module "alb" {
  source         = "./modules/alb"
  public_subnet  = module.vpc.public_subnet_id
  vpc_id         = module.vpc.vpc_id
  tg_instance_id = module.ec2.instance_id
}

module "s3" {
  source = "./modules/s3"
}
___________________________________________________________________________________________________________________________________________________________________________________________________________________----
variable.tf
variable "region" {
  default = "ap-south-1"
}
___________________________________________________________________________________________________________________________________----
output.tf:
output "instance_public_ip" {
  value = module.ec2.instance_public_ip
}
output "alb_dns_name" {
  value = module.alb.dns_name
}
output "s3_bucket_name" {
  value = module.s3.bucket_name
}
___________________________________________________________________________________________________________________________________________________-
Module: modules/vpc/main.tf

resource "aws_vpc" "main" {
  cidr_block           = "10.0.0.0/16"
  enable_dns_support   = true
  enable_dns_hostnames = true

  tags = {
    Name = "main-vpc"
  }
}

resource "aws_subnet" "public" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.1.0/24"
  map_public_ip_on_launch = true
  availability_zone       = "ap-south-1a"

  tags = {
    Name = "public-subnet"
  }
}
# Private subnet
resource "aws_subnet" "private" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = "10.0.2.0/24"
  map_public_ip_on_launch = false
  availability_zone       = "ap-south-1a"

  tags = {
    Name = "private-subnet"
  }
}

# Elastic IP for NAT Gateway          ##  it is must for private subnet NAT gateway
resource "aws_eip" "nat_eip" {
  vpc = true
}

# NAT Gateway in public subnet
resource "aws_nat_gateway" "nat" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public.id

  depends_on = [aws_internet_gateway.gw]
}

# Private Route Table (uses NAT)
resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat.id
  }

  tags = {
    Name = "private-rt"
  }
}

# Associate private route table with private subnet
resource "aws_route_table_association" "private_assoc" {
  subnet_id      = aws_subnet.private.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "main-gw"
  }
}

resource "aws_route_table" "rt" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "main-rt"
  }
}

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.public.id
  route_table_id = aws_route_table.rt.id
}

resource "aws_security_group" "web" {
  vpc_id = aws_vpc.main.id
  name   = "web-sg"

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}
________________________________________
output.tf -----vpc
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet_id" {
  value = aws_subnet.public.id
}

output "sg_id" {
  value = aws_security_group.web.id
}
____________________________________________________________________________________________
Module: modules/ec2/main.tf

variable "vpc_id" {}
variable "public_subnet" {}
variable "sg_id" {}

resource "aws_instance" "web" {
  ami           = "ami-0f5ee92e2d63afc18"
  instance_type = "t2.micro"
  subnet_id     = var.public_subnet
  vpc_security_group_ids = [var.sg_id]
  key_name      = "your-key-name"

  tags = {
    Name = "web-server"
  }
}
__________________________________
moddule--ec2--output.tf

output "instance_id" {
  value = aws_instance.web.id
}

output "instance_public_ip" {
  value = aws_instance.web.public_ip
}
_____________________________________________________________________________________________________---
Module: modules/alb/main.tf

variable "vpc_id" {}
variable "public_subnet" {}
variable "tg_instance_id" {}

resource "aws_lb" "app_alb" {
  name               = "app-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = []
  subnets            = [var.public_subnet]
}

resource "aws_lb_target_group" "tg" {
  name     = "web-tg"
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id
}

resource "aws_lb_listener" "listener" {
  load_balancer_arn = aws_lb.app_alb.arn
  port              = 80
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = aws_lb_target_group.tg.arn
  }
}

resource "aws_lb_target_group_attachment" "attach" {
  target_group_arn = aws_lb_target_group.tg.arn
  target_id        = var.tg_instance_id
  port             = 80
}
_______-----__________________________________________________
output.tf

output "dns_name" {
  value = aws_lb.app_alb.dns_name
}
____________________________________________________________________
Module: modules/s3/main.tf-----------
resource "aws_s3_bucket" "app_bucket" {
  bucket = "my-app-bucket-${random_id.rand.hex}"
  force_destroy = true
}

resource "random_id" "rand" {
  byte_length = 4
}
__________________________________________________________
output.tf--------s3-main.tf
output "bucket_name" {
  value = aws_s3_bucket.app_bucket.bucket
}
__________________________________________________________________________
 Folder: modules/rds/main.tf
 variable "vpc_id" {}
variable "subnet_ids" {
  type = list(string)
}
variable "db_username" {}
variable "db_password" {}

resource "aws_db_subnet_group" "db_subnet_group" {
  name       = "app-db-subnet-group"
  subnet_ids = var.subnet_ids

  tags = {
    Name = "DB subnet group"
  }
}

resource "aws_security_group" "rds_sg" {
  name        = "rds-sg"
  description = "Allow MySQL access"
  vpc_id      = var.vpc_id

  ingress {
    from_port   = 3306
    to_port     = 3306
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"] # restrict in production
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "rds-sg"
  }
}

resource "aws_db_instance" "app_db" {
  allocated_storage    = 20
  engine               = "mysql"
  engine_version       = "8.0"
  instance_class       = "db.t3.micro"
  name                 = "appdb"
  username             = var.db_username
  password             = var.db_password
  db_subnet_group_name = aws_db_subnet_group.db_subnet_group.name
  vpc_security_group_ids = [aws_security_group.rds_sg.id]
  skip_final_snapshot  = true
  publicly_accessible  = true # set false for production

  tags = {
    Name = "app-rds-db"
  }
}
____________________________________________________
output.tf---rds---DB---
output "rds_endpoint" {
  value = aws_db_instance.app_db.endpoint
}
___________________________________________________-
Update main.tf to include the RDS module:

module "rds" {
  source      = "./modules/rds"
  vpc_id      = module.vpc.vpc_id
  subnet_ids  = [module.vpc.public_subnet_id] # Replace with private subnets in production
  db_username = "admin"
  db_password = "Admin123!" # Use secrets manager or TF vars in real env
}
__________________________________________________________________---------
Secure Credentials (Optional but Recommended)
Create a terraform.tfvars file:
db_username = "admin"
db_password = "Admin123!"
_____________________________-
And update variables.tf:
variable "db_username" {}
variable "db_password" {}
_____________________________________
outputs.tf:output "rds_endpoint" {
  value = module.rds.rds_endpoint
}

____________________________________________________________________
